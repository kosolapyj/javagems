#summary A brief introduction to Java Gems Logging library.

= Java Gems Logging = 

This is just another logging framework. It was invented, because its author needed to log one message with different facilities and with different severities for the each of these facilities. For example, the rudimentary requirement was to log "Too many connections" message as "security warning", "performance info" and "general notice". 

==  The First Touch ==

Basic features of Java Gems Logging library are following:

  * A logging  _facility_ is separated from a logging _severity_. (In fact, what about `java.util.logging.Level.CONFIG`? It is a _severity_, because it is _the_ level, but it seems to be much more like a facility for me.)
  * Each logging severity has a _meaning_ assigned (see javadoc API documentation). So, severities can be used uniformly across the application regardless of a number of developers or teams involved.
  * Each logging _record_ can have several logging facilities assigned and each of them may have a different severity. So, what is a _warning_ from security point of view can be also a _debug_ information from performance point of view.
  * Java Gems `Logger` is an _interface_. Providing different implementations with a different behavior, different demands of client application are supported.

=== Coding Example ===

At this moment, you should see [http://code.google.com/p/javagems/source/browse/trunk/docs/examples/srcs/logging/TheFirstTouch.java TheFirstTouch.java] example. 

The output of the example is as follows (except line numbers at the  beginnings of lines):

{{{
01: 2008-09-02 21:06:40.733 <main(1)> {{NOTICE}}	[logging.TheFirstTouch.main(67)]	'null'
02: 2008-09-02 21:06:40.850 <main(1)> {{NOTICE}}	[logging.TheFirstTouch.main(68)]	' Hello, world! '
03: 2008-09-02 21:06:40.852 <main(1)> {{NOTICE}}	[logging.TheFirstTouch.main(69)]	'logging.TheFirstTouch@cdedfd'
04: 2008-09-02 21:06:40.855 <main(1)> {{WARNING}}	[logging.TheFirstTouch.main(74)]	'Something is wrong.'
05: 2008-09-02 21:06:40.857 <main(1)> {{PERFORMANCE:NOTICE}}	[logging.TheFirstTouch.main(81)]	'Load is too high.'
06: 2008-09-02 21:06:40.858 <main(1)> {{SECURITY:NOTICE}}	[logging.TheFirstTouch.main(82)]	'Bad boys are here.'
07: 2008-09-02 21:06:40.860 <main(1)> {{PERFORMANCE:INFO}}	[logging.TheFirstTouch.main(87)]	'Performance information.'
08: 2008-09-02 21:06:40.862 <main(1)> {{PERFORMANCE:INFO}{SECURITY:WARNING}}	[logging.TheFirstTouch.main(94)]	'Too many connections.'
09: 2008-09-02 21:06:40.864 <main(1)> {{FATAL}}	[logging.TheFirstTouch.main(102)]	'java.lang.RuntimeException: Ooops.
10: 	at logging.TheFirstTouch.main(TheFirstTouch.java:102)
11: Caused by: java.lang.IllegalStateException: I'm the cause.
12: 	... 1 more
13: '
}}}

The basic structure of a logging record is the following:
  # At the beginning, there is a creation timestamp of the logging record.
  # In angle brackets, there is a thread identification. It is a thread name and its numeric ID. 
  # In braces, there are _logging tags_, i.e. pairs of logging facility and corresponding severity. If a logging record was created without any facility, so-called "null facility" with an empty name is used, see lines 1-3. A default severity is `NOTICE` and may be changed when an instance of `LoggingEntryPoint` is created.
  # In square brackets, there is a logging record creator identifications, i.e. a package, class, method and line where the logging record was created.
  # Finally, there is a logging message itself. Please note that the message is quoted, so you can easily catch whitespaces at the beginning and end of message, see line 2. 