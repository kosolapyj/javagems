#summary Improving code robustness by proper design of methods returning optional values.

= Optional Values =

This short article will show you a simple trick how to significantly improve robustness of client code which use methods returning _optional_ values. A method returning _optional_ value is such method usually returning an object, but sometimes returning ... simply _nothing_. A good example is a method returning object stored in a cache: usually it returns cached object identified by some kind of key, but sometime it has nothing to return, because the object was evicted from cache storage meantime. 

== Example ==

In our example, provider is a credit bank and consumer is a client requesting for a loan. The business entity _loan_ is represented by a simple immutable class holding an amout of money:

{{{
public final class Loan {

	private final int amount;

	public Loan(final int amount) {
		this.amount = amount;
	}

	public int getAmount() {
		return amount;
	}
	
}
}}}

Many of sanity checks and javadoc comments are omitted here. See "References" section below to see where to find fully documented and runable code used in this example. In fact, internals of the `Loan` class are not important for this example. 

== References ==

  * ToDo: Option sources
  * ToDo: Example sources

== Best practices == 

Even if this design gem is useful, do not overuse it blindly. Very often a better solution exists: Empty collection or zero-lenght array can be returned as safe return value. Where an instance of an interface is required, its _null-implementation_ could be the perfect sentinel value. Nota bene, `Option` wrapper is quite good for a return value, but it is only seldom a smart choice for input attributes. However, this is also possible ... (Later we will add a link to an example here when it is committed to repository. If you see this message here for a long time, you should send us an email that we forgot it.) 